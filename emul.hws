/**********************************************************
* Tiny 6502 Simulator By Salvatore Di Vincenzo 08/10/2016 *
**********************************************************/
/**********************************************************
* Cambiamenti:																						*
***********************************************************
* 15/11/2016:	By Salvatore (divdalv) Di Vincenzo					*
* Velocizato il processo di esecuzione, ed ho riscritto il*
* ciclo degli opcode usando delle	Funzioni indicizate.		*
* Ringrazio Allanon per avermi consigliato delle funzioni	*
* indicizate poer velocizare ulteriormente il codice.			*
**********************************************************/

Video_Def=200
PC_Def=10000 ;Indirizzo in cui si carica il prog
CPU={}
CPU.REG={a=0,x=0,y=0,PC=PC_Def}
CPU.REG.Flags=0
CPU.SP=0
CPU.Opcode={}

posx={0,10/2,20/2,30/2,40/2,50/2,60/2,70/2,80/2,90/2,100/2,110/2,120/2,130/2,140/2,150/2,160/2,170/2,180/2,190/2}
posy={0,10/2,20/2,30/2,40/2,50/2,60/2,70/2,80/2,90/2,100/2,110/2,120/2,130/2,140/2,150/2,160/2,170/2,180/2,190/2}
colori={#BLACK,#WHITE,#RED,#MAROON,#PURPLE,#GREEN,#BLUE,#YELLOW,#OLIVE,#FUCHSIA,$707070,#GRAY,#LIME,#AQUA,#SILVER}
SetFillStyle(#FILLCOLOR)

AllocMem(1, 32768) ;Allocamento di 32k

exec_state=1 ;Stato settato su attivo, 0 per inattivo
/*Gestione OPCODE*/
CPU.Opcode[0]=Function() exec_state=0  EndFunction ;BRK
CPU.Opcode[1]=Function() CPU.REG.a=Peek(1,CPU.REG.PC+1,#BYTE) CPU.REG.PC=CPU.REG.PC+2 EndFunction ;LDA
CPU.Opcode[2]=Function() CPU.REG.a=CPU.REG.a+Peek(1,CPU.REG.PC+1,#BYTE) CPU.REG.PC=CPU.REG.PC+2 EndFunction ;ADC
CPU.Opcode[3]=Function() Poke(1,Peek(1,CPU.REG.PC+1,#BYTE),CPU.REG.a,#BYTE) CPU.REG.PC=CPU.REG.PC+2 EndFunction ;STA
CPU.Opcode[4]=Function() CPU.REG.x=Peek(1,CPU.REG.PC+1,#BYTE) CPU.REG.PC=CPU.REG.PC+2 EndFunction ;LDX
CPU.Opcode[5]=Function() CPU.REG.x=CPU.REG.x+1 CPU.REG.PC=CPU.REG.PC+1 EndFunction ;INX
CPU.Opcode[6]=Function() If CPU.REG.y=Peek(1,CPU.REG.PC+1,#BYTE) CPU.REG.Flags=1 Else CPU.REG.Flags=0	EndIf CPU.REG.PC=CPU.REG.PC+2	EndFunction ;CMY
CPU.Opcode[7]=Function() If CPU.REG.Flags<>1 CPU.REG.PC=PC_Def+Peek(1,CPU.REG.PC+1,#BYTE) Else CPU.REG.Flags=0 CPU.REG.PC=CPU.REG.PC+2 EndIf EndFunction ;BNE
CPU.Opcode[8]=Function() CPU.REG.x=CPU.REG.a CPU.REG.PC=CPU.REG.PC+1 EndFunction ;TAX
CPU.Opcode[9]=Function() CPU.REG.y=CPU.REG.y-1 CPU.REG.PC=CPU.REG.PC+1 EndFunction ;DEY
CPU.Opcode[10]=Function() CPU.REG.y=Peek(1,CPU.REG.PC+1,#BYTE) CPU.REG.PC=CPU.REG.PC+2 EndFunction ;LDY
CPU.Opcode[11]=Function() CPU.SP=CPU.REG.PC CPU.REG.PC=Peek(1,CPU.REG.PC+1,#BYTE) CPU.REG.PC=CPU.REG.PC+2 EndFunction ;JSR
CPU.Opcode[12]=Function() CPU.CP=CPU.SP CPU.SP=0 EndFunction ;RTS
CPU.Opcode[13]=Function() EndFunction
CPU.Opcode[14]=Function() EndFunction
CPU.Opcode[15]=Function() EndFunction
CPU.Opcode[16]=Function() EndFunction

Function CPU.OpenBin()
	tt=PC_Def
	file$ = FileRequest("Select some files", "out")
	OpenFile(1, file$)
	Repeat 
		Poke(1,tt,ReadInt(1),#BYTE) 
		tt=tt+1
	Until Eof(1)
	CloseFile(1)
	for Local i=0 to 399
		poke(1,Video_Def+i,0,#byte)
	Next
EndFunction

Function draw_screen()
	mv=0
	For Local e=0 to 19 Step 1
	For Local i=0 to 19 Step 1		
		Box(posx[i],posy[e],5,5,colori[Peek(1,Video_Def+mv,#byte)])
		mv=mv+1		
	Next
	Next
EndFunction


SetInterval(1, draw_screen, 1000/75)	
CPU.OpenBin()

StartTimer(1)
Repeat
		DisableLineHook()
		Box(490,0,150,100,#BLACK) 
		TextOut(500,10,"Reg A:"..CPU.REG.a)
		TextOut(500,20,"Reg X:"..CPU.REG.x)
		TextOut(500,30,"Reg Y:"..CPU.REG.y)
		TextOut(500,40,"ProgCount:"..CPU.REG.PC)
		TextOut(500,50,"Flags:"..CPU.REG.Flags)
		CPU.Opcode[Peek(1,CPU.REG.PC,#BYTE)]()
		EnableLineHook()
		WaitTimer(1, 6)
		CheckEvent()
Until exec_state=0
TextOut(#CENTER,#CENTER,"EXECUTION COMPLETE..Press Left Mouse for Exit!") ;Flip
WaitLeftMouse()